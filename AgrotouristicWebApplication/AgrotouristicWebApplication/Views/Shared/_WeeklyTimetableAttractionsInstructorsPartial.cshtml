@model Repository.ViewModels.AttractionInstructors
@using Repository.ViewModels
@using Newtonsoft.Json

<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/jqueryval")

        @foreach (KeyValuePair<DateTime, List<string>> item in Model.AssignedAttractions)
        {
            <script type="text/javascript">
                var dictionary ={};
                $(function () {
                    dictionary[@Html.Raw(JsonConvert.SerializeObject(item.Key.ToShortDateString()))] = @Html.Raw(JsonConvert.SerializeObject(item.Value));
                });
            </script>
        }

        <script>
            $(function() {
                $("input[type='button']").hover( function() {
                    if($(this).val() == 'Usuń')
                    {
                        ($(this).parent()).parent().attr('style','background-color: aqua');
                    }
                });
                $("input[type='button']").mouseleave( function() {
                    if($(this).val() == 'Usuń')
                    {
                        ($(this).parent()).parent().attr('style','background-color: lavender');
                    }
                });
            })
        </script>

        <link rel="stylesheet" href="~/Content/TimeTableStyleSheet.css" type="text/css" />
    </head>
    <body>
        <div id="TimeTableDetails" class="form-horizontal">

            <div style="clear:both" />

            <table class="table" border="1" id="TimeTableAttractions">
                <thead>
                    <tr>
                        <td>
                            <p>
                                Terminy
                            </p>
                            <br />
                        </td>
                        @foreach (DateTime date in Model.AssignedAttractions.Keys.ToList())
                        {
                            <td>
                                <p>
                                    <input type="text" name="Term" readonly="readonly" value="@date.ToShortDateString()" />
                                </p>
                                <p>
                                    <input type="text" name="DayOfWeek" readonly="readonly" value="@(ReservationAttractions.Days[date.DayOfWeek.ToString()])"/>
                                </p>
                            </td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.MaxRows; i++)
                    {
                        <tr>
                            <td>
                                <p>Atrakcja:</p>
                                <p>Liczba osób:</p>
                            </td>
                            @foreach (DateTime date in Model.AssignedAttractions.Keys.ToList())
                            {
                                <td>
                                    @if (i < Model.AssignedAttractions[date].Count)
                                    {
                                        <p>@Model.AssignedAttractions[date][i].Split('(')[0].Split(';')[1].Split(',')[0]</p>
                                        <p>@Model.AssignedAttractions[date][i].Split('(')[0].Split(';')[1].Split(',')[1]</p>

                                        if (date.CompareTo(DateTime.Now.Date) > 0)
                                        {
                                            <p><input type="button" name="ButtonAddInstructor" value="Dodaj" onclick="location.href='@Url.Action("AddInstructor", "ReceptionistAttractions",new {id=@Model.AssignedAttractions[date][i].Split('(')[0].Split(';')[0],attractionName= @Model.AssignedAttractions[date][i].Split('(')[0].Split(';')[1].Split(',')[0] })'" /></p>
                                        }

                                        foreach (string item in @Model.AssignedAttractions[date][i].Split('(')[1].Split(')')[0].Split(';').ToList().Where(x => !x.IsEmpty()).ToList())
                                        {
                                            <div >
                                                <input type="hidden" name="EmailInstructor" value="@item.Split('|')[0]" />
                                                <p>@item.Split('|')[1].Split('-')[0].Split(',')[0],</p>
                                                <p>@item.Split('|')[1].Split('-')[0].Split(',')[1]</p>
                                                <input type="hidden" name="IDInstructor" value="@item.Split('|')[1].Split('-')[1]" />
                                                @if (date.CompareTo(DateTime.Now.Date) > 0)
                                                {
                                                    <p><input type="button" name="ButtonRemoveInstructor" value="Usuń" onclick="location.href='@Url.Action("RemoveInstructor", "ReceptionistAttractions",new {id=@Model.AssignedAttractions[date][i].Split('(')[0].Split(';')[0],name=@item.Split('|')[1].Split('-')[0]+"("+@item.Split('|')[0] +")",reservationAttractionWorkerId=@item.Split('|')[1].Split('-')[1]})'" /></p>
                                                }
                                            </div>
                                        }

                                    }
                                </td>
                            }

                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </body>
</html>
